from pygame import *
window = display.set_mode((1000,550))

back = (0,0,0)
win_width = 1000
win_height = 550
window.fill(back)


class GameSprite(sprite,Sprite):
    def __init__(self, img, player_x, player_y, player_speed, wight, height):
        super().__init__()
        self.image = transform.scale(image.load(img), (55,55))
        self.speed = player_speed
        self.rect = self.image.get_rect()
        self.rect.x = player_x
        self.rect.y = player_y
    
    
    def reset(self,window):
        window.blit(self.image,(self.rect.x,self.rect.y))

ball = Ball("ball.png",0,0,5,20,40)

class Player1(GameSprite):
    def update_r(self):
        keys = key.get_pressed()
        if keys[K_UP] and self.rect.y > 5:
            self.rect.y -=self.speed
        if keys[K_DOWN] and self.rect.y > 5:
            self.rect.y +=self.speed    

class Player2(GameSprite):
    def update_l(self):
        keys = key.get_pressed()
        if keys[K_w] and self.rect.y > 5:
            self.rect.y -=self.speed
        if keys[K_s] and self.rect.y > 5:
            self.rect.y +=self.speed    

class Ball(GameSprite):
    def __init__(self, image, player_x, player_y, speed_x, speed_y):
        super().__init__(image, player_x, player_y, 0)
        self.speed_x = speed_x
        self.speed_y = speed_y

    def update_position(self):
        self.rect.x += self.speed_x 
        self.rect.x += self.speed_y

    def update_speeds(self,speed_x,speed_y):
        self.speed_x = speed_x
        self.speed_y = speed_y

speed_x = 3
speed_y = 3

while game:
    display.update()
    if finish != True:
        ball.rect.x += speed_x
        ball.rect.y += speed_y
    
    
    if sprite.collide_rect(racket1, ball)
        or sprite.collide_rect(racket2,ball):
            speed_x *= -1




run = True 
clock = time.Clock()
FPS = 60

while run:
    for i in event.get():
        if i.type == QUIT:
            run = False


    display.update()
    clock.tick(FPS)
